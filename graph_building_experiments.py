from matplotlib import pyplot as plt
import numpy as np
import time
from main import (
    LANDING_PAD_BUILDING_TYPE,
    create_all_possible_tubes,
    create_all_possible_pods,
    GraphBuilder,
    LunarMonthData,
    get_pod_path_coordinates,
)

test_cases = dict(
    grid_tick_0=b"x\x9c\xdd\x9aAn\xeb8\x0c\x86\xafRd\xdd\x85)K\xb6<W\x19\x14\x83\xcek1(\xf0\xd0\x14i\xbax(z\xf7I\x1c\x9bt\xac\x8f:\x80\xbaq\x90R\x92I\xfe$\x7f\x91\xf9>\x9c^?\x8f_\xa7_\xaf\x9f\x87\xbf\x1e\xa4\xbb\xfe=>\x1c\xce\xa7\xe7\xf7\xcf\x8f\xe3\xe9\xfc\xcf\xef\xb7\xf7\xf9_\x7f?]\xbe\xfe8\xbe\xe8\xe7\x7f\xbf\xde~\xbf\xbc\xbd\xff7\x7f\xf1}8\xff\xf9x\xbd|\xba.~{Y>\xfc:\x1eO\x17\x91\xe7\xf3m\x87)=>\xa4t]\xfb\xfcy>\x1d\xdf\x9f\xbf\xce\xd7\xef\xbf\x0fr=\xfa\xf2uX\x9e\xfd\xf2\x8c\xcb3-\xcfay\x8e\xcb3/\xcfiyJ\xb7~Xw\x94uKY\xf7\x94uSYw\x95u[Y\xf7\x95ucYw\x0e\xf3\xce??\x8f\x0f\xaa\xe9\xb4j*\xa5\xa6r\xd1T\xd2\xd3V\\d\x95\x0f\x8ee\xee\xc5\xc3*\xde\xc3\xf6\xf1\"?\xde/P\xc3G\x90\xef/\xf2}3\x967S&\xd0\xb5\xbb\xa1\xecnA\\\x17\x0c\xe5\x82P\xdaR\xd4\xb7c)\x0f\xdb\xa7U<3\x14\xf2N~\x15\x9fp\xf7\xe1^\xbaW\x9cAH\xcd\xda\x86\xfb\x05\x8a\x1c!d\x86\xf2\x04[\x00\xd0\xecK\xf3\xa85\x85\xb0y\x83\xda\x9d\xbe\x8aM!p&\xb0\xa8\xbd\x12\xb98\x96gd]\x00.\x9e\xf1\xbf;a\xd4\x05\xe0c0\x92\x85;89\x94\xfb\xab8;y\xef35Qp\x12\xe7\xde\xa6\x83.\x00/\xe7r\x81\xbe\x7fp\xf2\xcfN_Q\x8b\x06\xf0\xf2U\xe1x\xbf@\x83 \x80\x93{\x88\x02\xf5q \x1f\xf7\xe5\t\x86\xa3\x00N\xce\xa5\x0f\xccF\x8e\x8f\x83g#\ndJ\xea\xba\x00\xbc\x1c+ \xea)\x96S\xa1\x81\xc9S(\xf7\x108\xfaF=\xb8YJ\x9b\xaaI{\x8c\xe5\x9b\xca\x8d\xd4\r\xcd[= \xb4\x02\xe8\x1e\xf0\xd9\x97`\xb0\x18\xee)\x07ue\x08\xd8\t\x80\xcf\xb1\xe6,\xc2gl\x8a^m\x08\x10\xc4\xd6\x8c}/z#\x04W.\xe55;D\x08\xaeT\t\xf6H\xa1\xd5C\n\xd5\x05\x10[\xa9\x96\x11#\x01\xb4\x92N\"e\xd0\x00'(\xe2\"@4\x966\xd2*\x19\x01\xa1\x02\xafd\x0b<\x88\x0e\x0e\xa6#\xb8y\xbc\xbdQ+\x90V]\x13 4\xd4\xb2y\x02\x88\x0e\xa5\xbb\xach'\xc0\xe8\x004B\xfd\x95\x9c*\xbf\x0b\x02;\x00 \n\xbcL\xd9k\xf2\x8a\xfc\x9e{\x9b\xce\x94E\x8b\x12iY79It\xf7FZ\x05\x92\x87\xd0}\xdc\x9b\x0e\x00Q\x882\xbbm\x80\x9b\xcb\xfd5&\x07p\xf2T\xbbI\x0e\x0e_\xf7\xca\xc6@5~!\x05\x8d\xc4\x98\x19\x13\xf09\xc0\xdd\xc7\x8cC\x00\x95\x12\xa0Z6\x06\xc2'\\\x7f\xec\x04\x00h\xbe\xc1\xa7\x11\xebo\xacI\xc1\x15j\xc6\xa1*\x7f\xb3~#\xc6Q\xe0\x8c\x90\x16(\xefX\x17\x82\xd8\x7fW1\xe6\x08\x89al\x8a\xcbk\x9c\x8f\x90\xd32\x94R\x95g\xee?:ek\x84\xac0A\xd5RyJ\nPG\xed\x00H\n\xd0\xde3}\x9d\x1e\xd3\xe0\xc9S\xff\x01\x98\x83r\xcf\x0c\xe8\x1cK\x83*q\xc8\x04N\xb8\x1e)s\xc8\x00\xceXVQ\r\x97\xecu@\xb3\xf7F\xd4e\x82\x8e\x85:-\x83\x93\xcb\xcb\xb8\xd5\xdd\xec9y\x0f:\xd3\x19\xbc\x0cW\x98\xcd\x11N\x97\xc9\xa3W\x99\xd2'\xb4\xa5\xd4\xcd\x93sI\xf2\xb8\xc3\x04n\xceM\xe5g3\xfe\x84\xbd\x93\x12q\xea\xde\xc9k\x9e\xb8\xfc|\"\x8cv\x85\xbf\x94JN\x1e;\xf1\xf8\xfc\x04\x18\xa5\x86\x91\x01\x02 :@\xd0(\xe4&\x80h\xaa.\x00\x8c\xe6\xca\x15R:\xea\x92A\xdf\xce\x1a}\xd2\x01L\xc7\xd2L\xd6\x91\xee\xc0\xd7\x85\xfcF\x1c<=5\xc5\xa07\xba\x12F\xe7.S+\xba\x86\x8d\xb2\x14`\t*\xfd\x06\x9eN\x0f\xc5K\xa1\xd2a\x13\xa5\xa9\xae\x9d\xe9J<\xa5\xab\xf4\x7f\xa4s\x98JC\x15Fu\xa5Y\xdeT\xe1@B\xb3\xbc\xb1fM\x9a\xe5\x8dM]67\xbaR\xf9\xed\xda\x82\x8e\xcd\x1fi\x88:T\x98\x9e\xd0\x0c5\x02\x15\xb0\xccFC\xd4\x92|n\xd0\xe9u\x87\xf7\xedF\x1bf\xd3\x18u~\xd3\xe00\\\xa1Ij9\xd85yo\x92\xea\x1e@\x93T\x81\x84naL\xb3T\x816\xfaf\xc2\x0eP\xedk\xe3l\x9a\xa6Bc\xdf|A\xd3\xd4X!\x8aB\xc3T\x81_El\x0c\xe5P\xc5\xe4\x90W\xc1y*q\xc5\xcd[9\xfd\xa0\xe0%<\x1a\xa9.\x10l$\x07lt%\xa4\xb6\xc5$6\xca:]\xee\xa1\x19]m,'4\x86\x1f\xcax\xdf\x10W\x1cf\xd7\x82\x91\xc6\xd9\x02?S\xda\x1c\x01\x19bh\xaa\x9dhy\x87F\xf1\x02\r\xb6\xcd\x15\x92\xa6\xf1\xb9l\x80Y\x05\xa7\x89\xf6P&\\\xab\x1a4\xd1\x9e\t\xce>\x7f\x9a\x97i\xa8-\xf03\x1c\xab48\xd6\xeej}i\xa1\xc1\xf6\xb8(\xf2\xf4\xf3?*\x1dYv",
    grid_tick_1=b"x\x9c\xdd\x9aAn\xeb8\x0c\x86\xafRd\xdd\x85)K\xb6<W\x19\x14\x83\xcek1(\xf0\xd0\x14i\xbax(z\xf7I\x1c\x9bt\xac\x8f:\x80\xbaq\x90R\x92I\xfe$\x7f\x91\xf9>\x9c^?\x8f_\xa7_\xaf\x9f\x87\xbf\x1e\xa4\xbb\xfe=>\x1c\xce\xa7\xe7\xf7\xcf\x8f\xe3\xe9\xfc\xcf\xef\xb7\xf7\xf9_\x7f?]\xbe\xfe8\xbe\xe8\xe7\x7f\xbf\xde~\xbf\xbc\xbd\xff7\x7f\xf1}8\xff\xf9x\xbd|\xba.~{Y>\xfc:\x1eO\x17\x91\xe7\xf3m\x87)=>\xa4t]\xfb\xfcy>\x1d\xdf\x9f\xbf\xce\xd7\xef\xbf\x0fr=\xfa\xf2uX\x9e\xfd\xf2\x8c\xcb3-\xcfay\x8e\xcb3/\xcfiyJ\xb7~Xw\x94uKY\xf7\x94uSYw\x95u[Y\xf7\x95ucYw\x0e\xf3\xce??\x8f\x0f\xaa\xe9\xb4j*\xa5\xa6r\xd1T\xd2\xd3V\\d\x95\x0f\x8ee\xee\xc5\xc3*\xde\xc3\xf6\xf1\"?\xde/P\xc3G\x90\xef/\xf2}3\x967S&\xd0\xb5\xbb\xa1\xecnA\\\x17\x0c\xe5\x82P\xdaR\xd4\xb7c)\x0f\xdb\xa7U<3\x14\xf2N~\x15\x9fp\xf7\xe1^\xbaW\x9cAH\xcd\xda\x86\xfb\x05\x8a\x1c!d\x86\xf2\x04[\x00\xd0\xecK\xf3\xa85\x85\xb0y\x83\xda\x9d\xbe\x8aM!p&\xb0\xa8\xbd\x12\xb98\x96gd]\x00.\x9e\xf1\xbf;a\xd4\x05\xe0c0\x92\x85;89\x94\xfb\xab8;y\xef35Qp\x12\xe7\xde\xa6\x83.\x00/\xe7r\x81\xbe\x7fp\xf2\xcfN_Q\x8b\x06\xf0\xf2U\xe1x\xbf@\x83 \x80\x93{\x88\x02\xf5q \x1f\xf7\xe5\t\x86\xa3\x00N\xce\xa5\x0f\xccF\x8e\x8f\x83g#\ndJ\xea\xba\x00\xbc\x1c+ \xea)\x96S\xa1\x81\xc9S(\xf7\x108\xfaF=\xb8YJ\x9b\xaaI{\x8c\xe5\x9b\xca\x8d\xd4\r\xcd[= \xb4\x02\xe8\x1e\xf0\xd9\x97`\xb0\x18\xee)\x07ue\x08\xd8\t\x80\xcf\xb1\xe6,\xc2gl\x8a^m\x08\x10\xc4\xd6\x8c}/z#\x04W.\xe55;D\x08\xaeT\t\xf6H\xa1\xd5C\n\xd5\x05\x10[\xa9\x96\x11#\x01\xb4\x92N\"e\xd0\x00'(\xe2\"@4\x966\xd2*\x19\x01\xa1\x02\xafd\x0b<\x88\x0e\x0e\xa6#\xb8y\xbc\xbdQ+\x90V]\x13 4\xd4\xb2y\x02\x88\x0e\xa5\xbb\xach'\xc0\xe8\x004B\xfd\x95\x9c*\xbf\x0b\x02;\x00 \n\xbcL\xd9k\xf2\x8a\xfc\x9e{\x9b\xce\x94E\x8b\x12iY79It\xf7FZ\x05\x92\x87\xd0}\xdc\x9b\x0e\x00Q\x882\xbbm\x80\x9b\xcb\xfd5&\x07p\xf2T\xbbI\x0e\x0e_\xf7\xca\xc6@5~!\x05\x8d\xc4\x98\x19\x13\xf09\xc0\xdd\xc7\x8cC\x00\x95\x12\xa0Z6\x06\xc2'\\\x7f\xec\x04\x00h\xbe\xc1\xa7\x11\xebo\xacI\xc1\x15j\xc6\xa1*\x7f\xb3~#\xc6Q\xe0\x8c\x90\x16(\xefX\x17\x82\xd8\x7fW1\xe6\x08\x89al\x8a\xcbk\x9c\x8f\x90\xd32\x94R\x95g\xee?:ek\x84\xac0A\xd5RyJ\nPG\xed\x00H\n\xd0\xde3}\x9d\x1e\xd3\xe0\xc9S\xff\x01\x98\x83r\xcf\x0c\xe8\x1cK\x83*q\xc8\x04N\xb8\x1e)s\xc8\x00\xceXVQ\r\x97\xecu@\xb3\xf7F\xd4e\x82\x8e\x85:-\x83\x93\xcb\xcb\xb8\xd5\xdd\xec9y\x0f:\xd3\x19\xbc\x0cW\x98\xcd\x11N\x97\xc9\xa3W\x99\xd2'\xb4\xa5\xd4\xcd\x93sI\xf2\xb8\xc3\x04n\xceM\xe5g3\xfe\x84\xbd\x93\x12q\xea\xde\xc9k\x9e\xb8\xfc|\"\x8cv\x85\xbf\x94JN\x1e;\xf1\xf8\xfc\x04\x18\xa5\x86\x91\x01\x02 :@\xd0(\xe4&\x80h\xaa.\x00\x8c\xe6\xca\x15R:\xea\x92A\xdf\xce\x1a}\xd2\x01L\xc7\xd2L\xd6\x91\xee\xc0\xd7\x85\xfcF\x1c<=5\xc5\xa07\xba\x12F\xe7.S+\xba\x86\x8d\xb2\x14`\t*\xfd\x06\x9eN\x0f\xc5K\xa1\xd2a\x13\xa5\xa9\xae\x9d\xe9J<\xa5\xab\xf4\x7f\xa4s\x98JC\x15Fu\xa5Y\xdeT\xe1@B\xb3\xbc\xb1fM\x9a\xe5\x8dM]67\xbaR\xf9\xed\xda\x82\x8e\xcd\x1fi\x88:T\x98\x9e\xd0\x0c5\x02\x15\xb0\xccFC\xd4\x92|n\xd0\xe9u\x87\xf7\xedF\x1bf\xd3\x18u~\xd3\xe00\\\xa1Ij9\xd85yo\x92\xea\x1e@\x93T\x81\x84naL\xb3T\x816\xfaf\xc2\x0eP\xedk\xe3l\x9a\xa6Bc\xdf|A\xd3\xd4X!\x8aB\xc3T\x81_El\x0c\xe5P\xc5\xe4\x90W\xc1y*q\xc5\xcd[9\xfd\xa0\xe0%<\x1a\xa9.\x10l$\x07lt%\xa4\xb6\xc5$6\xca:]\xee\xa1\x19]m,'4\x86\x1f\xcax\xdf\x10W\x1cf\xd7\x82\x91\xc6\xd9\x02?S\xda\x1c\x01\x19bh\xaa\x9dhy\x87F\xf1\x02\r\xb6\xcd\x15\x92\xa6\xf1\xb9l\x80Y\x05\xa7\x89\xf6P&\\\xab\x1a4\xd1\x9e\t\xce>\x7f\x9a\x97i\xa8-\xf03\x1c\xab48\xd6\xeej}i\xa1\xc1\xf6\xb8(\xf2\xf4\xf3?*\x1dYv",
)

data = LunarMonthData.from_compressed_string(test_cases["grid_tick_0"])
graph_builder = GraphBuilder()
t0 = time.perf_counter()
graph = graph_builder.build_transport_lines(data)
t1 = time.perf_counter()
paths = create_all_possible_tubes(int(1e10), graph.routes_to_build)
t2 = time.perf_counter()
coordinates = data.get_building_coordinates()
pod_actions, remaining_resources = create_all_possible_pods(int(1e10), graph, [])
t3 = time.perf_counter()


print(f"Graph building: {t1 - t0:.6f}s")
print(f"Tube building: {t2 - t1:.6f}s")
print(f"Pod building: {t3 - t2:.6f}s")


plt.gca().invert_yaxis()
plt.plot(coordinates[:, 0], coordinates[:, 1], "o")
for i in range(len(coordinates)):
    plt.text(coordinates[i][0], coordinates[i][1], f"{i}")

assert graph.adjacency_matrix is not None
adjacency_matrix = graph.adjacency_matrix

for i in range(len(coordinates)):
    for j in range(i + 1, len(coordinates)):
        if np.isinf(adjacency_matrix[i][j]):
            continue
        plt.plot(
            [coordinates[i][0], coordinates[j][0]],
            [coordinates[i][1], coordinates[j][1]],
            "k--",
        )
        plt.text(
            (coordinates[i][0] + coordinates[j][0]) / 2,
            (coordinates[i][1] + coordinates[j][1]) / 2,
            f"{adjacency_matrix[i][j]:.2f}",
        )

for building_1, building_2 in graph.routes_to_build:
    plt.plot(
        [building_1.coordinates[0], building_2.coordinates[0]],
        [building_1.coordinates[1], building_2.coordinates[1]],
        "r-",
    )

for building in data.buildings:
    if building.type != LANDING_PAD_BUILDING_TYPE:
        continue
    plt.plot(building.coordinates[0], building.coordinates[1], "ro", markersize=15)

for pod_action in pod_actions:
    pod_path = get_pod_path_coordinates(pod_action, data.buildings)
    plt.plot(pod_path[:, 0], pod_path[:, 1], "g-")

plt.legend()
plt.show()
